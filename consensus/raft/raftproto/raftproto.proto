syntax = "proto3";

option go_package="v8.run/go/dsys/consensus/raft/raftproto";
package proto;

enum EntryType {
    EntrySystem = 0;
    EntryUser = 1;
}

message Entry {
    uint64 Term = 10;
    uint64 Index = 20;
    EntryType Type = 30;
    bytes Data = 40;
}

message State {
    uint64 Term = 10;
    uint64 VotedTerm = 20;
    uint64 VotedFor = 30;
    uint64 Leader = 40;
    repeated uint64 Nodes = 50;
}

message Snapshot {
    uint64 SnapshotID = 10; // Snowflake ID
    uint64 LastIncludedIndex = 20;
    uint64 LastIncludedTerm = 30;
    uint64 Size = 40;
    uint64 Offset = 50;
    bytes Data = 60;
}

message AppendEntriesRequest {
    uint64 ConsensusGroup = 10;
    uint64 Term = 20;
    uint64 LeaderId = 30;
    uint64 PrevLogIndex = 40;
    uint64 PrevLogTerm = 50;
    uint64 LeaderCommit = 60;
    repeated Entry Entries = 70;
}

message AppendEntriesResponse {
    uint64 ConsensusGroup = 10;
    uint64 Term = 20;
    bool Success = 30;
}

message RequestVoteRequest {
    uint64 ConsensusGroup = 10;
    uint64 Term = 20;
    uint64 CandidateID = 30;
    uint64 LastLogIndex = 40;
    uint64 LastLogTerm = 50;
}

message RequestVoteResponse {
    uint64 ConsensusGroup = 10;
    uint64 Term = 20;
    bool VoteGranted = 30;
}

message Message {
    oneof Message {
        AppendEntriesRequest AppendEntriesRequest = 10;
        AppendEntriesResponse AppendEntriesResponse = 20;
        RequestVoteRequest RequestVoteRequest = 30;
        RequestVoteResponse RequestVoteResponse = 40;
    }
}

service ConsensusService {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {};
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {};
}
